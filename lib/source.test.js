const dgram = require('dgram');
require('tap').mochaGlobals();
const chai = require('chai');
const chaiAsPromised = require('chai-as-promised');
chai.use(chaiAsPromised);

const { expect } = chai;

const source = require('./source');

const status = new Buffer([
    0xFF, 0xFF, 0xFF, 0xFF, 0x54, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x20, 0x45, 0x6E, 0x67, 0x69,
    0x6E, 0x65, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x00,
]);

const response = new Buffer([
    0xff, 0xff, 0xff, 0xff, 0x49, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x69, 0x6c, 0x6c, 0x20,
    0x69, 0x74, 0x20, 0x66, 0x75, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x73,
    0x00, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
    0x00, 0x62, 0x61, 0x73, 0x65, 0x00, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x78, 0x20, 0x41, 0x72, 0x65,
    0x6e, 0x61, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x64, 0x77, 0x00, 0x01, 0x31, 0x2e, 0x31, 0x2e,
    0x33, 0x00, 0xb1, 0x64, 0x64, 0x03, 0xe8, 0x4d, 0x94, 0xca, 0x23, 0x40, 0x01, 0x66, 0x66, 0x61,
    0x2c, 0x41, 0x54, 0x2c, 0x38, 0x36, 0x2c, 0x31, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x2c, 0x30, 0x2c,
    0x2c, 0x00, 0x86, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
])


describe('source engine query', () => {

    it('should query server', () => {
        const port = 60000;
        //
        const socket = dgram.createSocket('udp4');
        socket.on('message', (message, { address, port }) => {

            expect(message).to.deep.equal(status);

            socket.send(response, port, address);
        });

        socket.bind(port, () => {
            source({ port }).then(response => {
                expect(response).to.deep.equal({
                    game: 'reflex arena',
                    address: '127.0.0.1',
                    port: 25700,
                    name: 'fail till it fucking works',
                    map: 'Pocket Infinity',
                    steamAppId: 328070,
                    players: 0,
                    maxPlayers: 16,
                })
                socket.close();
            });
        });
    });

    it('should timeout', () => {
        expect(source({ port: 12345 })).to.be.rejectedWith(Error);
    })

});

