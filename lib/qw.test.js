require('tap').mochaGlobals();
const dgram = require('dgram');
const chai = require('chai');
const chaiAsPromised = require('chai-as-promised');
chai.use(chaiAsPromised);

const { expect } = chai;
const qw = require('./qw');

// prettier-ignore
const status = new Buffer([
    0xFF, 0xFF, 0xFF, 0xFF,
    //status
    0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00
]);

// prettier-ignore
const response = new Buffer([
    0xff, 0xff, 0xff, 0xff,
    0x6e, 0x5c, 0x6d, 0x61, 0x78, 0x66, 0x70, 0x73, 0x5c, 0x37, 0x37,
    0x5c, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5c, 0x75, 0x6e, 0x6e, 0x61, 0x6d, 0x65,
    0x64, 0x5c, 0x70, 0x6d, 0x5f, 0x6b, 0x74, 0x6a, 0x75, 0x6d, 0x70, 0x5c, 0x31, 0x5c, 0x2a, 0x76,
    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5c, 0x4d, 0x56, 0x44, 0x53, 0x56, 0x20, 0x30, 0x2e, 0x33,
    0x31, 0x2d, 0x64, 0x65, 0x76, 0x5c, 0x2a, 0x7a, 0x5f, 0x65, 0x78, 0x74, 0x5c, 0x35, 0x31, 0x31,
    0x5c, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5c, 0x32, 0x30, 0x5c, 0x74, 0x65,
    0x61, 0x6d, 0x70, 0x6c, 0x61, 0x79, 0x5c, 0x32, 0x5c, 0x64, 0x65, 0x61, 0x74, 0x68, 0x6d, 0x61,
    0x74, 0x63, 0x68, 0x5c, 0x31, 0x5c, 0x6d, 0x61, 0x78, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
    0x5c, 0x38, 0x5c, 0x6d, 0x61, 0x78, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73,
    0x5c, 0x36, 0x5c, 0x2a, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x69, 0x72, 0x5c, 0x71, 0x77, 0x5c, 0x66,
    0x70, 0x64, 0x5c, 0x32, 0x30, 0x36, 0x5c, 0x2a, 0x70, 0x72, 0x6f, 0x67, 0x73, 0x5c, 0x32, 0x34,
    0x37, 0x37, 0x38, 0x5c, 0x6d, 0x61, 0x70, 0x5c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x0a, 0x00,
]);

describe('quakeworld query', () => {
    it('should query server', () => {
        const port = 60000;
        //
        const socket = dgram.createSocket('udp4');
        socket.on('message', (message, { address, port }) => {
            expect(message).to.deep.equal(status);

            socket.send(response, port, address);
        });

        return new Promise((resolve, reject) => {
            socket.bind(port, () =>
                qw({ port })
                    .then(resolve)
                    .catch(reject),
            );
        }).then(response => {
            expect(response).to.deep.equal({
                maxfps: '77',
                hostname: 'unnamed',
                pm_ktjump: '1',
                '*version': 'MVDSV 0.31-dev',
                '*z_ext': '511',
                timelimit: '20',
                teamplay: '2',
                deathmatch: '1',
                maxclients: '8',
                maxspectators: '6',
                '*gamedir': 'qw',
                fpd: '206',
                '*progs': '24778',
                map: 'start',
                players: [],
            });
            socket.close();
        });
    });

    it('should timeout', () => {
        expect(qw({ port: 12345, timeout: 100 })).to.be.rejectedWith(Error);
    });
});
